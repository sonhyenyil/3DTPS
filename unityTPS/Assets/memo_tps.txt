memo_tps.txt

import
외부의 파일 자원을 유니티로 가져와 '에셋'화 하는 동작

Asset
유니티가 사용하는 게임 자원resource

Scene Graph
장면 그래프
3D 상의 게임오브젝트들을 담고 있는 '자료구조' 


랜더링 Rendering
:3D 공간상의 정점 단위의 데이터를
2D 공간상에 픽셀단위의 데이터를 이미지화시켜(프레임 이미지) 표시하는것

랜더링 파이프라인 Rendering Pipeline
렌더링의 일련의 공정들의 집합

일반적인 렌더링 파이프라인의 구조//기하와 래스터라이즈는 그래픽 처리장치에서 처리한다.
==========================================================================================================
응용프로그램단계				기하단계												래스터라이즈 단계
==========================================================================================================
응용프로그램이					월드변환		(카메라변환)뷰변환		투영 변환
그래픽 처리가 필요한			이동변환			이동 변환
데이터와 명령문을				회전변환			회전 변환
조직화하여						비례변환
그래픽 처리장치로
넘기는 작업
==========================================================================================================

CPU, SystemRAM					GPU, VideoRam								픽셀 데이터를 다룬다.
								정점 데이터를 다룬다.						불연속적인 공간을 다룬다.
								연속적인 공간을 다룬다.

셰이딩 Shading : 최종 색상을 결정한다.

Material 재질 : How to Shading. 어떻게 셰이딩할지에 대한 '데이터'와 '방법'을 담은 개념
Shader셰이더 : 셰이딩하는 작은 조각프로그램

유니티에서 길이단위는 1Unit을 쓴다.
유니티에서 1Unit은 실제 세계의 1m에 대응된다.
유니티의 무게 단위는 1이 1kg에 대응된다.

ridgidbody에 
Force계열 :  물리법칙을 따른다. 즉, 주어진 힘을 1초동안 가한다.
Impurse : 주어진 힘을 1프레임에 가한다.

게임 프로그램의 가장 핵심적인 구조는 game loof이다.

삼각형Triangle
: 3개의 정점vertex으로 이루어진 도형이다.

3D 그래픽스에서는
삼각형을 기본 단위로 사용한다.

삼각형들을 모아서 임의의 입체도형(폴리곤 polygon)을 만든다.

메쉬Mesh
<-- 삼각형들의 집합(정점들의 집합)

this: 객체 자기자신을 가리키는 참조변수. 암묵적으로 선언되어 있다. 생략 가능하다.

//변수의 선언과 초기화
int tA = 3;
//정수를 값으로 가지는 변수

int*tpA = nullptr; //변수타입 포인터 변수명으로 선언하며 변수의 데이터 타입을 지정할 필요가 있다.
//주소를 값으로 가지는 변수

class CSlime
{
 int mA = 0;

 void Doit();
}//사용자 정의 타입

CSlime tSlime;//객체

0_tpsfllowCam_0
 : 간단한 3rd Person Shooter 카메라 시점과 이동을 만들어보자

 캐릭터는 이동하고
 카메라는 따라간다.

 캐릭터 이동
	Rotate
	Translate

	카메라 워크

	instPChar_Simple : 가장 간단한 카메라 워크 구현은
			플레이어블 캐릭터에 계층구조 상 하위 오브젝트로 카메라를 두고
			자신이 원하는 시점으로 조정해두는 것이다.

벡터의 회전rotation이란?
크기는 그대로이고 방향이 바뀌는 것

스크립트를 이용한 TPS카메라 워트
		LateUpdate <--렌더링된 결과를 담기 위해 이 위치에 코드를 작성
		Transform.LookAt <-- 뷰좌표계의 기저basis의 회전에 관한 것이다.

		Lerp을 이용한 DampTrace 추적 감쇠 <-- 지연 카메라


직선의 방정식, 일차 함수
y = ax + b

게임 프로그래밍에서는 위의 직선의 방정식보다는
'직선의 벡터 방정식'을 더 자주 사용한다.

P = P0 + (P1 - P0) * t  //임의의 위치 P값 =  시점 + (종점 - 시점) * 스칼라값
    위치 + 벡터 * 스칼라
임의의 지점(P)
시점(P0)
종점(P1)
간이벡터(P1 - P0)

P = (1-t)*P0 + t*P1 //벡터를 이용한 선형보간식

0_tpsfllowCam_1
: 유니티에서 제공하는 캐릭터 컨트롤러를 사용하여 이동

오일러 수치 해석에 의한 이동 코드를 이해해야 해당 컴포넌트를 이용 가능하다.
속도 = 거리의 변화량 / 시간의 변화량
V = delta S / deltaT
  = (S[n] = S[n-1] / deltaT)

  V*deltaT = S[n] = S[n-1]

  S[n] = S[n-1] + V * deltaT

  가속도 = 속도의 변화량 / 시간의 변화량

  A = delta S / deltaT
	= (S[n] = S[n-1] / deltaT)

	V*deltaT = V[n] = V[n-1]

    V[n] = S[n-1] + A * deltaT

	캐릭터 컨트롤러는 
	Rigidbody 물리를 활용하지 않는 캐릭터를 만들 때 사용한다.

	Slope Limit : 올라갈 수 있는 경사 한계 설정
	Step Offset : 계단으로 취급할 수 있는 높이 한계 설정
	Skin Width : 두 콜라이더가 서로 스킨 너비만큼 관통가능
	<-- 이를테면 두 캐릭터가 이동하거나 할 때 서로 부딫히면 이 정도 허용오차는 주어
		서로 끼는 현상을 방지하기 위한 옵션이다.

	지터링 Jittering
	: 물결치듯 불안정하게 떨리는 현상

	다음은 매뉴얼에서 권장하는 수치이다.
	<-- 이를 기준으로 조정하여 사용하면 되겠다.

	신장 : 2unit(2m)
	보폭 : 0.1 ~ 0.4unit
	Slope Limit : 90degree
	Skin Width : 최소 0.01초과, Radius의 10%보다 크게
	Min Move Distance : 0 (해당 수치 이하이면 움직이지 않게 설정하기)



	transform.TransformDirection
	'로컬 좌표계 공간'에서 '월드 좌표계 공간' 으로 direction을 변환 하는 함수이다.


	카메라

	i) vector = Quternion*vector



quaternion

	허수 : 제곱해서 -가 나오는 수
	복소수는 다음과 같이 표기한다. (대수적인 표현)

	a + bi
    실수부 + 허수부
	복소수 * 복소수가
	2차원 평면에서의 임의의 위치의 회전이 된다.

	3차원 공간에서 임의의 위치의 회전이되는 '수'는 없을까?

	그래서 만들어낸 것이 항 4개로 표현하는 사원수Quaternion 이다.
	그리고 이것은 3차원 공간에서의 임의의 위치의 회전 (벡터 포함)을 대수적으로 표현한다.

	오일러각: 방향이라는 개념을
	모델(로컬)좌표와 월드좌표라는 두개의 직교좌표계 상의 위치관계에서 세개의 각도의 순서쌍으로 표현한 것

	오일러 각을 이용한 방향결정(회전)방법:
	오일러 각의 세 개의 각도를 차례대로 독립적인 사건으로 조합하여 방향을 결정하는 방법
	
	but 사원수의 방향결정(회전)은 한번에 진행된다.

	극좌표계 : 원점에서 떨어진 각도와 길이로 좌표값을 표현함(ex :세타,r)
	복소수 s = cosA + sinAi
	복소수 t = cosV + SinBi

	데카르트 좌표계 : 원점에서 떨어진 스칼라 값으로 표기함 (ex : a,b)